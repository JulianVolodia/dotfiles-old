#!/usr/bin/env python

import os
import os.path as op
import shutil


def find_source_files(path):
    """
    Finds all files in a subdirectory.
    """
    result = []
    for root, dirs, files in os.walk(path):
        result.extend([op.join(root, filename) for filename in files])
    return result

def create_rel_name(source_file, rel_path, make_dotfile=False):
    """
    Creates a file path from source_file relative to rel_path.

    E.g., if ``source_file`` is ``/tmp/foo/bar``, and ``rel_path`` is
    ``/tmp``, ``foo/bar`` is returned.

    If ``make_dotfile`` is ``True``, the returned path is prepended by a dot
    (``.foo/bar`` in the previous example).
    """
    sink_name = op.relpath(source_file, rel_path)
    if make_dotfile:
        sink_name = '.' + sink_name
    return sink_name

def copy_or_symlink(source, target, create_symlink=False):
    """
    Copies ``source`` to ``target`` and creates the necessary subdirectories in the process.

    If ``create_symlink`` is ``True``, then the file is not copied, but symlinked.
    """
    if op.exists(op.dirname(target)):
        print("Skipping generation of", op.dirname(target))
    else:
        print("Creating", op.dirname(target) + "…")
        os.makedirs(op.dirname(target))
    if create_symlink:
        print("Creating symlink from", source, "to", target + "…")
        try:
            os.symlink(source, target)
        except OSError:
            print("Skipping creation of symlink at", target)
    else:
        print("Copying from", source, "to", target + "…")
        shutil.copyfile(source, target)

def main():
    import argparse

    parser = argparse.ArgumentParser(description="Deploy dotfiles and set the right symlinks.")
    parser.add_argument('source_dir', type=str, help='Directory where configuration files are in')
    parser.add_argument('sink_dir', type=str, help="Directory where configuration files should be copied to")
    parser.add_argument('symlink_dir', type=str, help="Directory where symlinks should be created")
    args = parser.parse_args()

    source_dir = args.source_dir
    sink_dir = args.sink_dir
    symlink_dir = args.symlink_dir
    for i in find_source_files(source_dir):
        print("\n========")
        print(i)
        print("========")
        sink_file = create_rel_name(i, source_dir)
        sink_path = op.join(sink_dir, sink_file)
        copy_or_symlink(i, sink_path)
        print("========")
    print('--------------------------------------------------------------')
    for i in find_source_files(sink_dir):
        print("\n========")
        print(i)
        print("========")
        symlink_file = create_rel_name(i, sink_dir, make_dotfile=True)
        symlink_path = op.join(symlink_dir, symlink_file)
        copy_or_symlink(i, symlink_path, create_symlink=True)
        print("========")
    print('--------------------------------------------------------------')

if __name__ == '__main__':
    main()
