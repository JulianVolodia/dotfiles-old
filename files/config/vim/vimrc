" Early stuff {{{
" Runtime paths
set runtimepath=$XDG_DATA_HOME/vim/bundle/vundle,$XDG_DATA_HOME/vim,$VIM/vimfiles,$VIMRUNTIME,$XDG_DATA_HOME/vim/after,$VIM/vimfiles/after
" Leaders {{{
" These have to be put here in order to work, otherwise the plugin keybindings
" don't pick up the leader change
let mapleader = ","
let maplocalleader = "´"

" }}}
" Plugins {{{
" Vundle wants this to be off
filetype off
" Vundle initialization
call vundle#rc("$XDG_DATA_HOME/vim/bundle")
" Sorry, Mario, but our princess in in ahother castle
runtime plugins.vim
filetype plugin indent on

" }}}

" }}}
" General {{{
syntax enable
set background=light
colorscheme runiq
" I want to use LaTeX as my main TeX flavor, thank you very much
" Also, it's kind of a pain in the ass having to set this in .vimrc, though
" that's probably just my ignorance speaking
let g:tex_flavor = "latex"
" (Almost) disable the delay after keycodes
" Attention: Disabling the delay completely by setting noesckeys would disable
" the delay altogether, making the cursor and function keys nonfunctional in
" insert mode
" Attention: I use these dotfiles over SSH and a VPN, so setting this to a
" too-low value might cause problems. If it does, expect this value to change.
set ttimeoutlen=50

" Files {{{
" Don't create backup files
set nobackup
" Save viminfo file to keep state information from one vim session to the next
set viminfo+=n$XDG_CACHE_HOME/vim
" Common directory for all swap files (first existing directory is used)
set directory=$XDG_CACHE_HOME/vim,.,/var/tmp,/tmp
" Persistent undo (see ":help persistent-undo")
set undofile
" Common directory for persistent undo files
set undodir=$XDG_CACHE_HOME/vim

" }}}
" Indentation & linebreaks {{{
" 1 tab = 8 spaces
" Don’t fuck with this
set tabstop=8
" Number of spaces to use for each step of (auto)indent
set shiftwidth=4
" Tab at start of line inserts shiftwidth, tab anywhere else inserts
" tabstop/softtabstop
set smarttab
" Replace tabs with spaces
" To put actual tab, use <c-v><tab>
set expandtab
" Use this when pressing <tab> instead of tabstop
" Allows to keep tabstop at default value while editing as if it's set to
" softtabstop width
set softtabstop=4

" }}}
" Search {{{
" Show search hits during input
set incsearch
" highlight search hits
set hlsearch
" Case-insensitive search unless there are capital letters in search expression
set ignorecase
set smartcase
" Use ":s///g" by default
set gdefault

" }}}
" Tabs & buffers {{{
" Lets you leave edited buffers without having to save them
set hidden
" When splitting, only split current viewport
set noequalalways
" When splitting, create new viewports below/right to current viewports
set splitbelow
set splitright
" Prettify splits, diffs, folds
set fillchars="vert: ,fold: ,diff: "
" Also consider other tabs if searching for already open buffers
set switchbuf=usetab

" }}}
" Appearance {{{
" Breaks lines in sane places
set linebreak
" Add this in front of line if line is too long for terminal
set showbreak=+

" At all times show at least this many lines over/under cursor
set scrolloff=3
" Not necessary because of powerline plugin
set noshowmode
" Highlights the current line
set cursorline
" Show current command in status line
set showcmd
" Show tabline only if there is >1 tab
set showtabline=1
" Always show status line
set laststatus=2

" }}}
" Mouse {{{
" Use mouse
set mouse=a

" }}}
" Completion {{{
" Show a popup even if there's only one option
" Show preview window
" Complete to longest common substring
set completeopt=menuone,preview,longest
set wildmenu
set wildmode=longest:full,full

" }}}

" }}}
" Functions {{{
" Customize  fold text: just fold text with length appended {{{
function! CustomFoldText()
    "get first non-blank line
    let fs = v:foldstart
    while getline(fs) =~ '^\s*$' | let fs = nextnonblank(fs + 1)
    endwhile
    if fs > v:foldend
        let line = getline(v:foldstart)
    else
        let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
    endif

    let foldSize = 1 + v:foldend - v:foldstart
    let foldSizeStr = " (" . foldSize . " lines)"
    return line . foldSizeStr
endf
set foldtext=CustomFoldText()

" }}}

" }}}
" Keybindings {{{
" Fucking keys {{{
" Fuck you, man key
noremap K <nop>

" }}}
" Movement {{{
" Makes opening command line easier
nnoremap ü :
vnoremap ü :

" This is similar to the US-English keyboard layout and makes typing bracket
" commands a LOT easier
nmap ö [
vmap ö [
nmap ä ]
vmap ä ]
" OMG I love bracket commands

" Easier movement between virtual lines
noremap <silent> j gj
noremap <silent> k gk
noremap <silent> gj j
noremap <silent> gk k

" Easier movement between viewports
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l
nnoremap <c-h> <c-w>h

" Easier movement between buffers
noremap <silent> <right> :bnext<cr>
noremap <silent> <left> :bprev<cr>

" Use <tab> to teleport to matching parens
noremap <tab> %

" }}}
" Command-line window {{{
" Use Q for macros
noremap Q q
" q is often used to close transient windows, so being able to use it without
" a delay is nice
" I'll just use <c-f> on the command line to open the :,/, and ? windows
noremap q <nop>

" allow leaving cmdline-window with <esc>
au CmdwinEnter * nnoremap <buffer> <esc> :quit<cr>
" Select current line without having to enter insert mode
au CmdwinEnter * nnoremap <buffer> <cr> i<cr>

" }}}
" Quickfix and location list windows {{{
" NOTE: All quickfix commands potentially change buffers
" Jump to current error
noremap <silent> <leader>cc :cc!<cr>
" Open quickfix window
noremap <silent> <leader>co :botright :copen<cr>
" Close quickfix window
noremap <silent> <leader>cC :cclose<cr>
" Open window when there are recognized errors
noremap <silent> <leader>cw :botright :cwindow<cr>
" Go to previous error in list
noremap <silent> <leader>cp :cprevious!<cr>
noremap <silent> <leader>cN :cNext!<cr>
" Go to next error in list
noremap <silent> <leader>cn :cnext!<cr>
noremap <silent> <leader>cP :cPrevious!<cr>
" Go to last error in previous file in list that includes a filename
noremap <silent> <leader>cpf :cpfile!<cr>
noremap <silent> <leader>cNf :cNfile!<cr>
" Go to first error in next file in list that includes a file name
noremap <silent> <leader>cnf :cnfile!<cr>
" Display first error
noremap <silent> <leader>c0 :cfirst!<cr>
" Display last error
noremap <silent> <leader>cG :clast!<cr>
" Quit Vim with error code so compile will not compile the same file again
noremap <silent> <leader>cq :cquit!<cr>
" Re-read error file
noremap <silent> <leader>cf :cgetfile<cr>
" Re-read error file and jump to first error
noremap <silent> <leader>cj :cfile!<cr>
" List all errors
noremap <silent> <leader>cl :clist!<cr>
" Go to older quickfix error list
noremap <silent> <leader>c- :colder<cr>
" Go to newer quickfix error list
noremap <silent> <leader>c+ :cnewer<cr>

" NOTE: No location list command changes buffers
" Jump to current error
noremap <silent> <leader>ll :ll<cr>
" Open location list window
noremap <silent> <leader>lo :lopen<cr>
" Close location list window
noremap <silent> <leader>lC :lclose<cr>
" Open window when there are recognized errors
noremap <silent> <leader>lw :lwindow<cr>
" Go to previous error in list
noremap <silent> <leader>lp :lprevious<cr>
noremap <silent> <leader>lN :lNext<cr>
" Go to next error in list
noremap <silent> <leader>ln :lnext<cr>
noremap <silent> <leader>lP :lPrevious<cr>
" Go to last error in previous file in list that includes a filename
noremap <silent> <leader>lpf :lpfile<cr>
noremap <silent> <leader>lNf :lNfile<cr>
" Go to first error in next file in list that includes a file name
noremap <silent> <leader>lnf :lnfile<cr>
" Display first error
noremap <silent> <leader>l0 :lfirst<cr>
" Display last error
noremap <silent> <leader>lG :llast<cr>
" Quit Vim with error code so compile will not compile the same file again
noremap <silent> <leader>lq :lquit<cr>
" Re-read error file
noremap <silent> <leader>lf :lgetfile<cr>
" Re-read error file and jump to first error
noremap <silent> <leader>lj :lfile<cr>
" List all errors
noremap <silent> <leader>ll :llist<cr>
" Go to older error location list
noremap <silent> <leader>l- :lolder<cr>
" Go to newer error location list
noremap <silent> <leader>l+ :lnewer<cr>

" }}}
" Completion {{{
" Use <C-J> and <C-K> instead of <C-N> and <C-P>
imap <c-j> <c-n>
imap <c-k> <c-p>

" }}}

" Make!
noremap <silent> <f5> :make<cr>
" Easier :nohl
noremap <silent> <leader><cr> :nohlsearch<cr>
" Makes folding fun
noremap <silent> <space> za
" Use this to toggle paste mode
set pastetoggle=<f1>
" Make Y behave like D and C
noremap <silent> Y y$

" }}}

" vim: foldmethod=marker
