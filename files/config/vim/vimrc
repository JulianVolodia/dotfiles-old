" runiq's ~/.config/vim/.vimrc

" Early stuff {{{
    " Leaders {{{
        " These have to be put here in order to work, otherwise the plugin keybindings
        " don't pick up the leader change
        let mapleader = "\<space>"
        let maplocalleader = "-"

    " }}}
    " A word on runtimepath settings. {{{
        " NeoBundle adds the rtps of its bundles to the beginning of an existing
        " runtimepath, and its bundle/after rtps at the end of the existing
        " runtimepath. Since Vim gives higher priority to files that are earlier
        " in the runtimepath, this leads to bundle settings having higher
        " precedence than user settings, which just shouldn't happen. In order
        " to alleviate that problem, I wait until after NeoBundle has
        " initialized all its bundles before I set the remaining part of the
        " runtimepath. It should look like this:
        "
        "   u - b - s -- sa - ba - ua
        "
        "   u = User settings (highest priority)
        "   b = Bundle settings (second highest)
        "   s = System settings (lowest priority)
        "   sa = system after/ directories
        "   ba = Bundle after/ directories
        "   ua = User after/ directories
        "
        "   This way, user settings take precedence before bundle and system settings,
        "   both in the regular plugin/ftplugin directories as well as in the after/
    "   directories. I believe this is the way it should be. }}}
    " Early runtimepath dickery!
    set runtimepath=$XDG_DATA_HOME/vim/bundle/neobundle.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after
    " Plugins {{{
        " Neobundle initialization {{{
            " Neobundle wants this to be off
            filetype off
            call neobundle#rc(expand("$XDG_DATA_HOME/vim/bundle"))
            " Let NeoBundle manage NeoBundle
            NeoBundleFetch 'Shougo/neobundle.vim'
            " Bundles
            " Vimproc has a native component
            NeoBundle 'Shougo/vimproc', {
                \ 'build': {
                \     'windows': 'make -f make_mingw32.mak',
                \     'cygwin': 'make -f make_cygwin.mak',
                \     'mac': 'make -f make_mac.mak',
                \     'unix': 'make -f make_unix.mak',
                \     },
                \ }
            NeoBundle 'ervandew/ag'
            NeoBundle 'vim-scripts/argtextobj.vim'
            NeoBundle 'tpope/vim-commentary'
            NeoBundle 'vim-scripts/DeleteTrailingWhitespace'
            NeoBundle 'tpope/vim-fugitive'
            NeoBundle 'sjl/gundo.vim.git'
            NeoBundle 'ivanov/vim-ipython'
            NeoBundle 'LaTeX-Box-Team/LaTeX-Box'
            NeoBundle 'ludovicchabant/vim-lawrencium'
            NeoBundle 'zhaocai/linepower.vim'
            NeoBundle 'MarcWeber/vim-addon-local-vimrc'
            NeoBundle 'edsono/vim-matchit'
            NeoBundle 'tpope/vim-obsession'
            NeoBundle 'kien/rainbow_parentheses.vim'
            NeoBundle 'tpope/vim-repeat'
            NeoBundle 'vim-scripts/ShowTrailingWhitespace'
            NeoBundle 'mhinz/vim-signify'
            NeoBundle 'tmhedberg/SimpylFold'
            NeoBundle 'sjl/splice.vim.git'
            NeoBundle 'tpope/vim-surround'
            NeoBundle 'scrooloose/syntastic'
            NeoBundle 'godlygeek/tabular'
            NeoBundle 'majutsushi/tagbar'
            NeoBundle 'LStinson/TagmaTasks'
            NeoBundle 'SirVer/ultisnips'
            NeoBundle 'tpope/vim-unimpaired'
            NeoBundle 'Shougo/unite.vim'
            NeoBundle 'tsukkee/unite-help'
            NeoBundle 'osyo-manga/unite-quickfix'
            NeoBundle 'tsukkee/unite-tag'
            " Requires libclang 3.2 or higher, CMake, and Python headers
            NeoBundle 'Valloric/YouCompleteMe', {
            \   'build': {
            \       'unix': 'cmake -G "Unix Makefiles" -DUSE_SYSTEM_LIBCLANG=ON cpp && make ycm_core'
            \       }
            \ }
            filetype plugin indent on
        " }}}
        " Configuration {{{
            " Some preliminary remarks:
            " - all plugin functions that open some kind of split window have mapped that
            "   the opening/toggling of said window to a function key
            " - functions that toggle other stuff are normally either <leader><key> if I
            "   use them sparingly, or use their own keys if I use them often (e.g.
            "   commentary and üü)
            " Ag {{{
                noremap <leader>a :Ag<space>

            " }}}
            " DeleteTrailingWhitespace {{{
                " Don't automatically delete on writing a buffer
                let g:DeleteTrailingWhitespace = 0
                " Do this to fix trailing whitespace
                noremap <silent> <leader>d<space> :DeleteTrailingWhitespace<cr>

            " }}}
            " Fugitive {{{
                " Mappings are done in a function because they are used as autocommands
                function! s:setup_fugitive_mappings()
                    " Edit fugitive-revision (with repo basedir as working directory)
                    noremap <buffer> <leader>ve<space> :Gedit<space>
                    " Edit fugitive-revision in split
                    noremap <buffer> <leader>ves :Gsplit<space>
                    " Edit fugitive-revision in vertical split
                    noremap <buffer> <leader>vev :Gvsplit<space>
                    " Edit fugitive-revision in new tab
                    noremap <buffer> <leader>vet :Gtabedit<space>
                    " Edit fugitive-revision in preview window
                    noremap <buffer> <leader>vet :Gpedit<space>
                    " Read output of git command in current buffer
                    noremap <buffer> <leader>vE :Gread!<space>
                    " Read output of git command in new split
                    noremap <buffer> <leader>veS :Gsplit!<space>
                    " Read output of git command in vertical split
                    noremap <buffer> <leader>veV :Gvsplit!<space>
                    " Read output of git command in new tab
                    noremap <buffer> <leader>veT :Gtabedit!<space>
                    " Read output of git command in preview window
                    noremap <buffer> <leader>veP :Gpedit!<space>
                    " :cd relative to repository
                    noremap <buffer> <leader>vcd :Gcd<space>
                    " :lcd relative to repository
                    noremap <buffer> <leader>vcl :Glcd<space>
                    " Move file and rename buffer accordingly
                    noremap <buffer> <leader>vm :Gmove<space>
                    " Move file and rename buffer accordingly (overwrite if necessary)
                    noremap <buffer> <leader>vM :Gmove!<space>
                    " Do :w and stage results
                    noremap <silent> <buffer> <leader>vw :Gwrite<cr>
                    " Do :w, stage results, do :q
                    noremap <silent> <buffer> <leader>vwq :Gwq<cr>
                    " Do :w and stage results
                    noremap <silent> <buffer> <leader>vW :Gwrite!<cr>
                    " Do :w, stage results, do :q
                    noremap <silent> <buffer> <leader>vwQ :Gwq!<cr>
                    " Remove current file and delete buffer
                    noremap <buffer> <leader>vrm :Gremove<cr>
                    " Remove current file and delete buffer forcefully
                    noremap <buffer> <leader>vrM :Gremove!<cr>
                    " Open annotation window ("git blame", but who's counting)
                    noremap <silent> <buffer> <leader>va :Gblame<cr>
                    " Browse on GitHub, if possible
                    noremap <silent> <buffer> <leader>vb :Gbrowse<cr>
                    " Put GitHub URL in clipboard
                    noremap <silent> <buffer> <leader>vB :Gbrowse!<cr>
                    " Open status window
                    noremap <silent> <buffer> <leader>vs :Gstatus<cr>
                    " Show list of revisions for current file in location list
                    noremap <silent> <buffer> <leader>vl :Gllog<cr>
                    " Show list of commits for current file in location list
                    noremap <silent> <buffer> <leader>vL :Gllog --<cr>
                    " Open diff window
                    noremap <silent> <buffer> <leader>vd :Gsdiff<cr>
                    " Open vertical diff window
                    noremap <silent> <buffer> <leader>vvd :Gvdiff<cr>
                    " :Glgrep
                    noremap <buffer> <leader>vg :Glgrep<space>
                    " :Ggrep
                    noremap <buffer> <leader>vG :Ggrep<space>
                    " Open commit buffer (or status buffer if there's nothing staged)
                    noremap <silent> <buffer> <leader>vC :Gcommit<cr>
                endfunction
            " }}}
            " Gundo {{{
                " Toggles the Gundo windows
                " It looks kinda like a tree, see? See?
                noremap <f3> :GundoToggle<cr>
                " horizontal width of Gundo graph
                let g:gundo_width = 50
                " Vertical height of preview window
                "let g:gundo_preview_height = 25
                " Show preview window below file instead of below graph
                " let g:gundo_preview_bottom = 0
                " Show Gundo graph on the right
                "let g:gundo_right = 1
                " automatically close Gundo windows on reverting
                let g:gundo_close_on_revert = 1

            " }}}
            " Lawrencium {{{
                " I like my own mappings better
                let g:lawrencium_define_mappings = 0
                " As for fugitive: mappings are done in a function because they are used as
                " autocommands
                function! s:setup_lawrencium_mappings()
                    " :Hgedit
                    noremap <buffer> <leader>ve :Hgedit<space>
                    " :Hgcd
                    noremap <buffer> <leader>vcd :Hgcd<space>
                    " :Hglcd
                    noremap <buffer> <leader>vcl :Hglcd<space>
                    " Open annotation window
                    noremap <silent> <buffer> <leader>va :Hgannotate<cr>
                    " Open status window
                    noremap <silent> <buffer> <leader>vs :Hgstatus<cr>
                    " Open log window for current file
                    noremap <silent> <buffer> <leader>vl :Hglogthis<cr>
                    " Open log window for entire repository
                    noremap <silent> <buffer> <leader>vL :Hglog<cr>
                    " Open diff window
                    noremap <silent> <buffer> <leader>vd :Hgdiff<cr>
                    " Open vertical diff window
                    noremap <silent> <buffer> <leader>vvd :Hgvdiff<cr>
                    " Open diffsum window
                    noremap <silent> <buffer> <leader>vD :Hgdiffsumsplit<cr>
                    " Open vertical diffsum window
                    noremap <silent> <buffer> <leader>vvD :Hgvdiffsumsplit<cr>
                    " Open commit buffer
                    noremap <silent> <buffer> <leader>vC :Hgcommit<cr>
                    " Open vertical commit buffer
                    noremap <silent> <buffer> <leader>vvC :Hgvcommit<cr>
                    " Revert current file to previous revision
                    noremap <silent> <buffer> <leader>vr :Hgrevert<cr>
                    " Revert current file to previous revision (no backup)
                    noremap <silent> <buffer> <leader>vR :Hgrevert!<cr>
                endfunction
            " }}}
            " Obsession {{{
                " Sets up keybinding, invoked in autocmd below
                " Place for session file depends on whether current file is in Git/Hg repo or
                " not: For repos, session file is $reporoot/.session.vim, for non-repo files,
                " the session file is saved at ./.session.vim
                function! s:obsession() " {{{
                    if exists('b:mercurial_dir')
                        let dir = fnamemodify(b:mercurial_dir, ':p:h')
                    elseif exists('b:git_dir')
                        " b:git_dir points to the actual .git directory
                        let dir = fnamemodify(b:git_dir, ':p:h:h')
                    else
                        let dir = fnamemodify(getcwd(), ':p:h')
                    endif
                    let fname = fnameescape(dir . "/.session.vim")
                    execute 'Obsession ' . fname
                endfunction " }}}
                noremap <silent> <leader>o :call <SID>obsession()<cr>
                noremap <silent> <leader>O :Obsession!<cr>
            " }}}
            " Rainbow Parentheses {{{
                " TODO:
                " - Add explicit color mappings
                " Toggle display of all kinds of parens
                noremap <silent> co) :RainbowParenthesesToggleAll<cr>
                noremap <silent> co( :RainbowParenthesesToggleAll<cr>

            " }}}
            " ShowTrailingWhitespace {{{
                " Show it by default
                let g:ShowTrailingWhitespace = 0
                " ZOMGWTFBBQ
                " I mean, toggle trailing whitespace display for current buffer
                noremap <silent> co<space> :<c-u>call ShowTrailingWhitespace#Toggle(0)<bar>echo (ShowTrailingWhitespace#IsSet() ? 'Showing trailing whitespace' : 'Not showing trailing whitespace')<cr>

            " }}}
            " Signify {{{
            " Use only for these VCSs, in the order specified
            let g:signify_vcs_list = ['hg', 'git']
            " Don't run Signify by default
            let g:signify_disable_by_default = 1
            " Don't overwrite signs used by other plugins (e.g. Syntastic)
            let g:signify_sign_overwrite = 0
            " Toggle Signify symbols
            " (the mapping is similar to those defined in unimpaired)
            noremap <silent> coC :SignifyToggle<cr>
            " }}}
            " Splice {{{
                " Use this as the splice prefix
                let g:splice_prefix = "<leader>s"
                " Use scrollbind on all modes
                let g:splice_initial_scrollbind_grid = 1
                let g:splice_initial_scrollbind_loupe = 1
                let g:splice_initial_scrollbind_compare = 1
                let g:splice_initial_scrollbind_path = 1

            " }}}
            " Syntastic {{{
                " Don't run Syntastic on opening files
                let g:syntastic_check_on_open = 0
                " Print error message for current line to command window
                let g:syntastic_echo_current_error = 1
                " Use the :sign interface to show errors
                let g:syntastic_enable_signs = 1
                " Use these symbols for errors, warnings, and style errors/warnings
                let g:syntastic_error_symbol = '✗'
                let g:syntastic_warning_symbol = '⚠'
                let g:syntastic_style_error_symbol = '✑'
                let g:syntastic_style_warning_symbol = '✎'
                " Don't use balloons
                let g:syntastic_enable_balloons = 0
                " Don't use syntax highlighting
                let g:syntastic_enable_highlighting = 1
                " Don't automatically jump to the first error when first opening a file
                let g:syntastic_auto_jump = 0
                " Always use location list for errors
                let g:syntastic_always_populate_loc_list = 1
                " Automatically close location list when no more errors are found
                let g:syntastic_auto_loc_list = 2
                " Error list height = command window height
                let g:syntastic_loc_list_height = 5
                " Don't automatically check
                let g:syntastic_mode_map = { 'mode': 'passive' }
                " Check manually
                noremap <leader>SS :SyntasticCheck<cr>
                " Toggle between active and passive
                noremap <silent> coS :SyntasticToggleMode<cr>

            " }}}
            " Tabularize {{{
                " Input new tabular expression
                noremap <leader>T :Tabularize<space>
                " Repeat last :Tabularize command
                noremap <leader>t :Tabularize<cr>
            " }}}
            " Tagbar {{{
                " Open tagbar window on the left
                let tagbar_left = 1
                " Make tagbar window as wide as the gundo plugin windows
                let tagbar_width = 50
                " Automatically jump to tagbar window as soon as it's opened
                let tagbar_autofocus = 1
                " Automatically close tagbar window when choosing a tag
                let tagbar_autoclose = 1
                " If current tag is inside a closed fold, open that fold just enough to show
                " the tag
                let tagbar_autoshowtag = 1
                " Toggle Tagbar window
                nnoremap <silent> <f4> :TagbarToggle<cr>

            " }}}
            " TagmaTasks {{{
                " Since tasks are generated in the quickfix/location list windows, their
                " bindings can be used
                " Don't create marks
                let g:TagmaTasksMarks = 0
                " I could either use a regex or list of tokens to look for – I'll go with the
                " regex
                let g:TagmaTasksRegexp = '\<\(FIXME\|TODO\|TASK\)\>\|\\todo{\|\\missingfigure{'
                " Again, I like using my own keybindings
                let g:TagmaTasksPrefix = ''
                " I'll also use the location list keybindings for moving between errors
                " instead of those defined in this plugin
                let g:TagmaTasksJumpKeys = 0
                " Toggle task window
                map <silent> <f5> <Plug>TagmaTaskToggle
            " }}}
            " UltiSnips {{{
                " Snippet directory for private snippets
                let g:UltiSnipsSnippetsDir = expand("$XDG_DATA_HOME/vim/snippets")
                " Snippet search path
                " The default snippets are in <bundledir>/ultisnips/UltiSnips directory
                let g:UltiSnipsSnippetDirectories = ["snippets", "UltiSnips"]
                " " Use this to expand a trigger (i.e. insert a snippet)
                let g:UltiSnipsExpandTrigger = "<tab>"
                " Use this to jump forward to next trigger
                let g:UltiSnipsJumpForwardTrigger = "<tab>"
                " Use this to jump backward to next trigger
                let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
                " NOTE: UltiSnips automatically falls back on Supertab completion if there's
                " no snippet to expand

            " }}}
            " Unite {{{
                " Requires the following to be installed:
                " - github.com/zhaocai/linepower.vim
                " - github.com/Shougo/vimproc.vim

                " Info:
                " - -buffer-name and -resume together speed up subsequent openings of that buffer, even if the content changes
                " - -toggle allows to toggle with the same keybinding
                " - -no-split replaces the current viewport with the unite buffer

                " Unite conflicts with powerline
                let g:unite_force_overwrite_statusline = 0
                " Track yank history with unite
                let g:unite_source_history_yank_enable = 1
                " Use XDG spec compliant data directory
                let g:unite_data_directory = expand("$XDG_CACHE_HOME/vim/unite")
                " Use fuzzy matcher
                call unite#filters#matcher_default#use(['matcher_fuzzy'])
                " Use unite for displaying ag search results
                let g:unite_source_grep_command = 'ag'
                let g:unite_source_grep_default_opts = '--nocolor --nogroup --hidden'
                let g:unite_source_grep_recursive_opt = ''

                " Open buffer list of current tab in current window
                noremap <silent> <leader>b :Unite -no-split -toggle -buffer-name=buffers buffer_tab<cr>
                " Open buffer list of all tabs in current window
                noremap <silent> <leader>B :Unite -no-split -toggle -buffer-name=buffers buffer<cr>
                " Edit file in current window
                noremap <silent> <leader>e :Unite -no-split -toggle -buffer-name=files file<cr>
                " Find file recursively
                " Note: Uses vimproc for asynchronous access and starts in insert
                " mode, because it's highly probably I want to narrow stuff down
                " immediately
                noremap <silent> <leader>E :Unite -no-split -toggle -buffer-name=files -start-insert file_rec/async:!<cr>
                " Open yank history
                noremap <silent> <leader>y :Unite -no-split -toggle -buffer-name=yanks -resume history/yank<cr>
                " Use unite for help files
                " I fucking love this plugin
                noremap <silent> <leader>h :Unite -no-split -toggle -buffer-name=help -resume -start-insert help<cr>
                " Grep through current buffer
                noremap <leader>g :Unite -no-split -toggle -buffer-name=grep grep:%::<cr>
                " Grep through all open buffers
                noremap <leader>G :Unite -no-split -toggle -buffer-name=grep grep:$buffers::<cr>
                " Modify quickfix window with unite
                " Note: Remember to reload the unite window with <c-l> after
                " changing the quickfix/location list contents
                noremap <leader>q :Unite  -buffer-name=quickfix -no-quit -toggle quickfix<cr>
                " Modify quickfix window with unite
                noremap <silent> <leader>cc :Unite  -buffer-name=quickfix -no-quit -horizontal -winheight=12 -no-quit -toggle quickfix<cr>
                noremap <silent> <leader>ll :Unite  -buffer-name=locations -no-quit -horizontal -winheight=12 -toggle location_list<cr>

            " }}}
            " YouCompleteMe {{{
            " Only use completion for these file types
            let g:ycm_filetype_whitelist = {
                \ 'c': 1,
                \ 'cpp': 1,
                \ 'python': 1
                \ }
            " Make YCM register itself as Syntastic checker for C, C++, Obj-C
            " and Obj-C++ filetypes (enables Syntastic integration)
            let g_ycm_register_as_syntastic_checker = 1
            " Seed completer with language keywords
            let g:ycm_seed_identifiers_with_syntax = 1
            " Show previews on completion
            let g:ycm_add_preview_window_to_completeopt = 1
            " Auto-close preview window
            let g:ycm_autoclose_preview_window_after_completion = 1
            " Load .ycm_extra_conf.py only from ~/prj and downwards
            let g:ycm_extra_conf_globlist = ['~/prj/*', '!~/*']

            " }}}

        " }}}

    " }}}
    " Late runtimepath dickery!
    set runtimepath^=$XDG_DATA_HOME/vim runtimepath+=$XDG_DATA_HOME/vim/after

" }}}
" General {{{
    syntax enable
    set background=light
    colorscheme summerfruit256
    " I want to use LaTeX as my main TeX flavor, thank you very much
    " Also, it's kind of a pain in the ass having to set this in .vimrc, though
    " that's probably just my ignorance speaking
    let g:tex_flavor = "latex"
    " (Almost) disable the delay after keycodes
    " Attention: Disabling the delay completely by setting noesckeys would disable
    " the delay altogether, making the cursor and function keys nonfunctional in
    " insert mode
    " Attention: I use these dotfiles over SSH and a VPN, so setting this to a
    " too-low value might cause problems. If it does, expect this value to change.
    set ttimeoutlen=50

    " Files {{{
        " Don't create backup files
        set nobackup
        " Save viminfo file to keep state information from one vim session to the next
        set viminfo+="n$XDG_CACHE_HOME/vim/viminfo"
        " Common directory for all swap files (first existing directory is used)
        set directory=$XDG_CACHE_HOME/vim/swap
        " Persistent undo (see ":help persistent-undo")
        set undofile
        " Common directory for persistent undo files
        set undodir=$XDG_CACHE_HOME/vim/undo

    " }}}
    " Indentation & linebreaks {{{
        " 1 tab = 8 spaces
        " Don’t fuck with this
        set tabstop=8
        " Number of spaces to use for each step of (auto)indent
        set shiftwidth=4
        " Tab at start of line inserts shiftwidth, tab anywhere else inserts
        " tabstop/softtabstop
        set smarttab
        " Replace tabs with spaces
        " To put actual tab, use <c-v><tab>
        set expandtab
        " Use this when pressing <tab> instead of tabstop
        " Allows to keep tabstop at default value while editing as if it's set to
        " softtabstop width
        set softtabstop=4

    " }}}
    " Search {{{
        " Show search hits during input
        set incsearch
        " highlight search hits
        set hlsearch
        " Case-insensitive search unless there are capital letters in search expression
        set ignorecase
        set smartcase
        " Use ":s///g" by default
        set gdefault

    " }}}
    " Tabs & buffers {{{
        " Lets you leave edited buffers without having to save them
        set hidden
        " When splitting, only split current viewport
        set noequalalways
        " When splitting, create new viewports below/right to current viewports
        set splitbelow
        set splitright
        " Prettify splits, diffs, folds
        set fillchars="vert: ,fold: ,diff: "
        " Jump to other windows in current tab if they contain the requested buffer
        set switchbuf=useopen

    " }}}
    " Appearance {{{
        " Breaks lines in sane places
        set linebreak
        " Add this in front of line if line is too long for terminal
        set showbreak=+

        " At all times show at least this many lines over/under cursor
        set scrolloff=3
        " Not necessary because of powerline plugin
        set noshowmode
        " Show current command in status line
        set showcmd
        " Show tabline only if there is >1 tab
        set showtabline=1
        " Always show status line
        set laststatus=2

    " }}}
    " Mouse {{{
        " Use mouse
        set mouse=a

    " }}}
    " Completion {{{
        " Show a popup even if there's only one option
        " Show preview window
        " Complete to longest common substring
        set completeopt=menuone,preview,longest
        set wildmenu
        set wildmode=longest:full,full

    " }}}

" }}}
" Functions {{{
    " Customize  fold text: just fold text with length appended {{{
        function! CustomFoldText()
            "get first non-blank line
            let fs = v:foldstart
            while getline(fs) =~ '^\s*$' | let fs = nextnonblank(fs + 1)
            endwhile
            if fs > v:foldend
                let line = getline(v:foldstart)
            else
                let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
            endif

            let foldSize = 1 + v:foldend - v:foldstart
            let foldSizeStr = " (" . foldSize . " lines)"
            return line . foldSizeStr
        endfunction
        set foldtext=CustomFoldText()

    " }}}
    " Check if I should set up Lawrencium or Fugitive keybindings {{{
        function! s:setup_vcs_keybindings()
            if exists('b:keybindings_setup')
                return
            endif
            let b:keybindings_setup = 1

            if exists('b:mercurial_dir')
                call s:setup_lawrencium_mappings()
            elseif exists('b:git_dir')
                call s:setup_fugitive_mappings()
            endif
        endfunction

    " }}}

" }}}
" Keybindings {{{
    " Fucking keys {{{
        " Fuck you, man key
        noremap K <nop>

    " }}}
    " Movement {{{
        " Makes opening command line easier
        nnoremap ü :
        vnoremap ü :

        " This is similar to the US-English keyboard layout and makes typing bracket
        " commands a LOT easier
        nmap ö [
        vmap ö [
        nmap ä ]
        vmap ä ]
        " OMG I love bracket commands

        " Easier movement between virtual lines
        noremap <silent> j gj
        noremap <silent> k gk
        noremap <silent> gj j
        noremap <silent> gk k

        " Easier movement between viewports
        nnoremap <c-j> <c-w>j
        nnoremap <c-k> <c-w>k
        nnoremap <c-l> <c-w>l
        nnoremap <c-h> <c-w>h

        " Use <tab> to teleport to matching parens
        noremap <tab> %

    " }}}
    " Command-line window {{{
        " Use Q for macros
        noremap Q q
        " q is often used to close transient windows, so being able to use it without
        " a delay is nice
        " I'll just use <c-f> on the command line to open the :,/, and ? windows
        noremap q <nop>

        " allow leaving cmdline-window with <esc>
        au CmdwinEnter * nnoremap <buffer> <esc> :quit<cr>
        " Select current line without having to enter insert mode
        au CmdwinEnter * nnoremap <buffer> <cr> i<cr>

    " }}}
    " Quickfix and location list windows {{{
        " Use unimpaired for the regularly used bracket commands
        " Use unite for basic window interaction (see above)
        " Re-read error file
        noremap <silent> <leader>cf :cgetfile<cr>
        " Re-read error file and jump to first error
        noremap <silent> <leader>cj :cfile<cr>
        " List all errors
        noremap <silent> <leader>cl :clist<cr>
        " Go to older quickfix error list
        noremap <silent> <leader>c- :colder<cr>
        " Go to newer quickfix error list
        noremap <silent> <leader>c+ :cnewer<cr>

        " NOTE: No location list command changes buffers
        " Re-read error file
        noremap <silent> <leader>lf :lgetfile<cr>
        " Re-read error file and jump to first error
        noremap <silent> <leader>lj :lfile<cr>
        " Go to older error location list
        noremap <silent> <leader>l- :lolder<cr>
        " Go to newer error location list
        noremap <silent> <leader>l+ :lnewer<cr>

    " }}}
    " Completion {{{
        " Use <C-J> and <C-K> instead of <C-N> and <C-P>
        inoremap <c-j> <c-n>
        inoremap <c-k> <c-p>

    " }}}

    " Easier :nohl
    nnoremap <silent> <leader><cr> :nohlsearch<cr>
    " Use this to toggle paste mode
    set pastetoggle=<f2>
    " Make Y behave like D and C
    noremap <silent> Y y$
    " Switch ; and , behavior so that , searches forwards and <s-,> backwards
    noremap , ;
    noremap ; ,

" }}}
" Autocommands {{{
    " Check for Git/Mercurial and set up keybindings accordingly
    augroup vcscheck
        autocmd!
        " Is executed after BufNewPost as well
        autocmd BufEnter * call s:setup_vcs_keybindings()
        autocmd BufUnload * unlet! b:keybindings_setup
    augroup END
" }}}

" vim: set foldmethod=marker:
