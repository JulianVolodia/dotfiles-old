" Early stuff {{{
" Leaders {{{
" These have to be put here in order to work, otherwise the plugin keybindings
" don't pick up the leader change
let mapleader = ","
let maplocalleader = "´"

" }}}
" A word on runtimepath settings. {{{
" Vundle adds the rtps of its bundles to the beginning of an existing
" runtimepath, and its bundle/after rtps at the end of the existing
" runtimepath. Since Vim gives higher priority to files that are earlier in
" the runtimepath, this leads to bundle settings having higher precedence than
" user settings, which just shouldn't happen. In order to alleviate that
" problem, I wait after Vundle has initialized all its bundles before I set
" the remaining part of the runtimepath. It should look like this:
"
"   u - b - s -- ua - ba - sa
"
"   u = User settings (highest priority)
"   b = Bundle settings (second highest)
"   s = System settings (lowest priority)
"   ua = User after/ directories
"   ba = Bundle after/ directories
"   sa = system after/ directories
"
"   This way, user settings take precedence before bundle and system settings,
"   both in the regular plugin/ftplugin directories as well as in the after/
"   directories. I believe this is the way it should be. }}}
" Early runtimepath dickery!
set runtimepath=$XDG_DATA_HOME/vim/bundle/vundle,$VIM/vimfiles,$VIMRUNTIME,$XDG_DATA_HOME/vim/after
" Plugins {{{
" Vundle initialization {{{
" Vundle wants this to be off
filetype off
call vundle#rc("$XDG_DATA_HOME/vim/bundle")
" Bundles
Bundle 'gmarik/vundle'
Bundle 'ervandew/ag'
Bundle 'tpope/vim-commentary'
Bundle 'kien/ctrlp.vim'
Bundle 'vim-scripts/DeleteTrailingWhitespace'
Bundle 'sjl/gundo.vim.git'
Bundle 'ivanov/vim-ipython'
Bundle 'davidhalter/jedi-vim'
Bundle 'LaTeX-Box-Team/LaTeX-Box'
Bundle 'ludovicchabant/vim-lawrencium'
Bundle 'MarcWeber/vim-addon-local-vimrc'
Bundle 'edsono/vim-matchit'
Bundle 'Lokaltog/vim-powerline'
Bundle 'kien/rainbow_parentheses.vim'
Bundle 'tpope/vim-repeat'
Bundle 'xolox/vim-session'
Bundle 'vim-scripts/ShowTrailingWhitespace'
Bundle 'tmhedberg/SimpylFold'
Bundle 'sjl/splice.vim.git'
Bundle 'tpope/vim-surround'
Bundle 'scrooloose/syntastic'
Bundle 'godlygeek/tabular'
Bundle 'majutsushi/tagbar'
Bundle 'LStinson/TagmaTasks'
Bundle 'maxbrunsfeld/vim-yankstack'
Bundle 'SirVer/ultisnips'
Bundle 'tpope/vim-unimpaired'
Bundle 'ervandew/supertab'
filetype plugin indent on
" Late runtimepath dickery!
set runtimepath^=$XDG_DATA_HOME/vim runtimepath+=$VIM/vimfiles/after

" }}}
" Configuration {{{
" Some preliminary remarks:
" - all plugin functions that open some kind of split window have mapped that
"   the opening/toggling of said window to a function key
" - functions that toggle other stuff are normally either <leader><key> if I
"   use them sparingly, or use their own keys if I use them often (e.g.
"   commentary and üü)
" Ag {{{
noremap <leader>a :Ag<space>

" }}}
" CtrlP {{{
" Keybinding for CtrlP in normal mode
let g:ctrlp_map = '<leader>e'
" Cache directory
let g:ctrlp_cache_dir = expand("$XDG_CACHE_HOME/vim/ctrlp")
" Use extensions:
" - mixed
let g:ctrlp_extensions = ['mixed']
" Normal Ctrlp
noremap <silent> <leader>e :CtrlP<cr>
" CtrlP in find buffer mode
noremap <silent> <leader>b :CtrlPBuffer<cr>
" CtrlP with root dir search disabled
noremap <silent> <leader>E :CtrlPRoot<cr>
" CtrlP in mixed mode
noremap <silent> <leader>x :CtrlPMixed<cr>

" }}}
" DeleteTrailingWhitespace {{{
" Don't automatically delete on writing a buffer
let g:DeleteTrailingWhitespace = 0
" Do this to fix trailing whitespace
noremap <silent> <leader>d<space> :DeleteTrailingWhitespace<cr>

" }}}
" Gundo {{{
" Toggles the Gundo windows
" It looks kinda like a tree, see? See?
noremap <f3> :GundoToggle<cr>
" horizontal width of Gundo graph
let g:gundo_width = 50
" Vertical height of preview window
"let g:gundo_preview_height = 25
" Show preview window below file instead of below graph
" let g:gundo_preview_bottom = 0
" Show Gundo graph on the right
"let g:gundo_right = 1
" automatically close Gundo windows on reverting
let g:gundo_close_on_revert = 1

" }}}
" Lawrencium {{{
" I like my own mappings better
let g:lawrencium_define_mappings = 0
" :Hgedit
noremap <leader>ve :Hgedit<space>
" :Hgcd
noremap <leader>vcd :Hgcd<space>
" :Hglcd
noremap <leader>vcl :Hglcd<space>
" Open annotation window
noremap <silent> <leader>va :Hgannotate<cr>
" Open status window
noremap <silent> <leader>vs :Hgstatus<cr>
" Open log window for current file
noremap <silent> <leader>vl :Hglogthis<cr>
" Open log window for entire repository
noremap <silent> <leader>vL :Hglog<cr>
" Open diff window
noremap <silent> <leader>vd :Hgdiff<cr>
" Open vertical diff window
noremap <silent> <leader>vvd :Hgvdiff<cr>
" Open diffsum window
noremap <silent> <leader>vD :Hgdiffsumsplit<cr>
" Open vertical diffsum window
noremap <silent> <leader>vvD :Hgvdiffsumsplit<cr>
" Open commit buffer
noremap <silent> <leader>vC :Hgcommit<cr>
" Open vertical commit buffer
noremap <silent> <leader>vvC :Hgvcommit<cr>
" Revert current file to previous revision
noremap <silent> <leader>vr :Hgrevert<cr>
" Revert current file to previous revision (no backup)
noremap <silent> <leader>vR :Hgrevert!<cr>
" }}}
" Powerline {{{
" Set mode names
let g:Powerline_mode_n = ' N '
let g:Powerline_mode_i = ' I '
let g:Powerline_mode_R = ' R '
let g:Powerline_mode_v = ' V '
let g:Powerline_mode_V = 'VLN'
let g:Powerline_mode_cv = 'VBL'
let g:Powerline_mode_s = ' S '
let g:Powerline_mode_S = 'SLN'
let g:Powerline_mode_cs = 'SBL'
" TODO: Theme
" }}}
" Rainbow Parentheses {{{
" TODO:
" - Add explicit color mappings
" Toggle display of all kinds of parens
noremap <silent> <leader>r :RainbowParenthesesToggleAll<cr>

" }}}
" Session {{{
" Don't load sessions automatically
let g:session_autoload = 0
" Automatically save current session on quitting Vim
let g:session_autosave = 'yes'
" Define :Session* commands
let g:session_command_aliases = 1
" Directory to save sessions in
let g:session_directory = expand("$XDG_CACHE_HOME/vim/sessions")
" }}}
" ShowTrailingWhitespace {{{
" Show it by default
let g:ShowTrailingWhitespace = 1
" ZOMGWTFBBQ
" I mean, toggle trailing whitespace display for current buffer
noremap <silent> <leader><space> :<c-u>call ShowTrailingWhitespace#Toggle(0)<bar>echo (ShowTrailingWhitespace#IsSet() ? 'Showing trailing whitespace' : 'Not showing trailing whitespace')<cr>
"
" }}}
" Splice {{{
" Use this as the splice prefix
let g:splice_prefix = "<leader>s"
" Use scrollbind on all modes
let g:splice_initial_scrollbind_grid = 1
let g:splice_initial_scrollbind_loupe = 1
let g:splice_initial_scrollbind_compare = 1
let g:splice_initial_scrollbind_path = 1

" }}}
" Supertab {{{
" Let supertab make out completion context
" Uses completefunc if set, or else omnifunc
" Else: Falls back to secondary default as specified by
" g:SuperTabContextDefaultCompletionType
let g:SuperTabDefaultCompletionType = "context"
" Use this as fallback
let g:SuperTabContextDefaultCompletionType = "<c-n>"
" Complete longest common match (like in shells)
let g:SuperTabLongestEnhanced = 1
" Automatically select first entry in menu
let g:SuperTabLongestHighlight = 1
" Use this to move forward
let g:SuperTabMappingForward = "<tab>"
" Use this to move backward
let g:SuperTabMappingBackward = "<s-tab>"
" Use this to display the normal <tab> character (is still affected by
" expandtab, shiftwidth, etc.)
" Doesn't work in terminal
let g:SuperTabMappingTabLiteral = "<c-tab>"
" Use <cr> to cancel completion
let g:SuperTabCrMapping = 1
" Automatically close preview window when popup window is closed
let g:SuperTabClosePreviewOnPopupClose = 1

" }}}
" Syntastic {{{
" Don't run Syntastic on opening files
let g:syntastic_check_on_open = 0
" Print error message for current line to command window
let g:syntastic_echo_current_error = 1
" Use the :sign interface to show errors
let g:syntastic_enable_signs = 1
" Use these symbols for errors, warnings, and style errors/warnings
let g:syntastic_error_symbol = 'E'
let g:syntastic_warning_symbol = 'W'
let g:syntastic_style_error_symbol = 'S'
let g:syntastic_style_warning_symbol = 's'
" Don't use balloons
let g:syntastic_enable_balloons = 0
" Don't use syntax highlighting
let g:syntastic_enable_highlighting = 0
" Don't automatically jump to the first error when first opening a file
let g:syntastic_auto_jump = 0
" Automatically close location list when no more errors are found
let g:syntastic_auto_loc_list = 2
" Error list height = command window height
let g:syntastic_loc_list_height = 7
" Don't automatically check
let g:syntastic_mode_map = { 'mode': 'passive' }
" Check manually
noremap <leader>S :SyntasticCheck<cr>

" }}}
" Tagbar {{{
" Open tagbar window on the left
let tagbar_left = 1
" Make tagbar window as wide as the gundo plugin windows
let tagbar_width = 50
" Automatically jump to tagbar window as soon as it's opened
let tagbar_autofocus = 1
" Automatically close tagbar window when choosing a tag
let tagbar_autoclose = 1
" If current tag is inside a closed fold, open that fold just enough to show
" the tag
let tagbar_autoshowtag = 1
" Toggle Tagbar window
nnoremap <silent> <f4> :TagbarToggle<cr>

" }}}
" TagmaTasks {{{
" Since tasks are generated in the quickfix/location list windows, their
" bindings can be used
" Don't create marks
let g:TagmaTasksMarks = 0
" I could either use a regex or list of tokens to look for – I'll go with the
" regex
let g:TagmaTasksRegexp = '\<\(FIXME\|TODO\|TASK\)\>\|\\todo{\|\\missingfigure{'
" Again, I like using my own keybindings
let g:TagmaTasksPrefix = ''
" I'll also use the location list keybindings for moving between errors
" instead of those defined in this plugin
let g:TagmaTasksJumpKeys = 0
" Toggle task window
map <silent> <f5> <Plug>TagmaTaskToggle
" }}}
" UltiSnips {{{
" Don't reverse search order
let g:UltiSnipsDontReverseSearchPath = "1"
" Snippet directory for private snippets
let g:UltiSnipsSnippetsDir = expand("$XDG_DATA_HOME/vim/snippets")
" Snippet search path
" The default snippets are in <bundledir>/ultisnips/UltiSnips directory
let g:UltiSnipsSnippetDirectories = ["snippets", "UltiSnips"]
" " Use this to expand a trigger (i.e. insert a snippet)
let g:UltiSnipsExpandTrigger = "<tab>"
" Use this to jump forward to next trigger
let g:UltiSnipsJumpForwardTrigger = "<tab>"
" Use this to jump backward to next trigger
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
" NOTE: UltiSnips automatically falls back on Supertab completion if there's
" no snippet to expand

" }}}
" Yankstack {{{
" Don't load default maps
let g:yankstack_map_keys = 0
"map Use + and - to cycle through yank stack
nmap <silent> + <Plug>yankstack_substitute_older_paste
nmap <silent> - <Plug>yankstack_substitute_newer_paste
" Use this to show yank stack
nnoremap <f2> :Yanks<cr>
" Needs to be called before redefining yank maps
call yankstack#setup()

" }}}

" }}}

" }}}

" }}}
" General {{{
syntax enable
set background=light
colorscheme runiq
" I want to use LaTeX as my main TeX flavor, thank you very much
" Also, it's kind of a pain in the ass having to set this in .vimrc, though
" that's probably just my ignorance speaking
let g:tex_flavor = "latex"
" (Almost) disable the delay after keycodes
" Attention: Disabling the delay completely by setting noesckeys would disable
" the delay altogether, making the cursor and function keys nonfunctional in
" insert mode
" Attention: I use these dotfiles over SSH and a VPN, so setting this to a
" too-low value might cause problems. If it does, expect this value to change.
set ttimeoutlen=50

" Files {{{
" Don't create backup files
set nobackup
" Save viminfo file to keep state information from one vim session to the next
set viminfo+="n$XDG_CACHE_HOME/vim/viminfo"
" Common directory for all swap files (first existing directory is used)
set directory=$XDG_CACHE_HOME/vim/swap
" Persistent undo (see ":help persistent-undo")
set undofile
" Common directory for persistent undo files
set undodir=$XDG_CACHE_HOME/vim/undo

" }}}
" Indentation & linebreaks {{{
" 1 tab = 8 spaces
" Don’t fuck with this
set tabstop=8
" Number of spaces to use for each step of (auto)indent
set shiftwidth=4
" Tab at start of line inserts shiftwidth, tab anywhere else inserts
" tabstop/softtabstop
set smarttab
" Replace tabs with spaces
" To put actual tab, use <c-v><tab>
set expandtab
" Use this when pressing <tab> instead of tabstop
" Allows to keep tabstop at default value while editing as if it's set to
" softtabstop width
set softtabstop=4

" }}}
" Search {{{
" Show search hits during input
set incsearch
" highlight search hits
set hlsearch
" Case-insensitive search unless there are capital letters in search expression
set ignorecase
set smartcase
" Use ":s///g" by default
set gdefault

" }}}
" Tabs & buffers {{{
" Lets you leave edited buffers without having to save them
set hidden
" When splitting, only split current viewport
set noequalalways
" When splitting, create new viewports below/right to current viewports
set splitbelow
set splitright
" Prettify splits, diffs, folds
set fillchars="vert: ,fold: ,diff: "
" Jump to other windows in current tab if they contain the requested buffer
set switchbuf=useopen

" }}}
" Appearance {{{
" Breaks lines in sane places
set linebreak
" Add this in front of line if line is too long for terminal
set showbreak=+

" At all times show at least this many lines over/under cursor
set scrolloff=3
" Not necessary because of powerline plugin
set noshowmode
" Show current command in status line
set showcmd
" Show tabline only if there is >1 tab
set showtabline=1
" Always show status line
set laststatus=2

" }}}
" Mouse {{{
" Use mouse
set mouse=a

" }}}
" Completion {{{
" Show a popup even if there's only one option
" Show preview window
" Complete to longest common substring
set completeopt=menuone,preview,longest
set wildmenu
set wildmode=longest:full,full

" }}}

" }}}
" Functions {{{
" Customize  fold text: just fold text with length appended {{{
function! CustomFoldText()
    "get first non-blank line
    let fs = v:foldstart
    while getline(fs) =~ '^\s*$' | let fs = nextnonblank(fs + 1)
    endwhile
    if fs > v:foldend
        let line = getline(v:foldstart)
    else
        let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
    endif

    let foldSize = 1 + v:foldend - v:foldstart
    let foldSizeStr = " (" . foldSize . " lines)"
    return line . foldSizeStr
endf
set foldtext=CustomFoldText()

" }}}

" }}}
" Keybindings {{{
" Fucking keys {{{
" Fuck you, man key
noremap K <nop>

" }}}
" Movement {{{
" Makes opening command line easier
nnoremap ü :
vnoremap ü :

" This is similar to the US-English keyboard layout and makes typing bracket
" commands a LOT easier
nmap ö [
vmap ö [
nmap ä ]
vmap ä ]
" OMG I love bracket commands

" Easier movement between virtual lines
noremap <silent> j gj
noremap <silent> k gk
noremap <silent> gj j
noremap <silent> gk k

" Easier movement between viewports
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l
nnoremap <c-h> <c-w>h

" Use <tab> to teleport to matching parens
noremap <tab> %

" }}}
" Command-line window {{{
" Use Q for macros
noremap Q q
" q is often used to close transient windows, so being able to use it without
" a delay is nice
" I'll just use <c-f> on the command line to open the :,/, and ? windows
noremap q <nop>

" allow leaving cmdline-window with <esc>
au CmdwinEnter * nnoremap <buffer> <esc> :quit<cr>
" Select current line without having to enter insert mode
au CmdwinEnter * nnoremap <buffer> <cr> i<cr>

" }}}
" Quickfix and location list windows {{{
" Use unimpaired for the regularly used bracket commands
" Jump to current error
noremap <silent> <leader>cc :cc<cr>
" Open quickfix window
noremap <silent> <leader>co :botright :copen<cr>
" Close quickfix window
noremap <silent> <leader>cC :cclose<cr>
" Open window when there are recognized errors, close it if there are none
noremap <silent> <leader>cw :botright :cwindow<cr>
noremap <silent> <f6> :botright :cwindow<cr>
" Re-read error file
noremap <silent> <leader>cf :cgetfile<cr>
" Re-read error file and jump to first error
noremap <silent> <leader>cj :cfile<cr>
" List all errors
noremap <silent> <leader>cl :clist<cr>
" Go to older quickfix error list
noremap <silent> <leader>c- :colder<cr>
" Go to newer quickfix error list
noremap <silent> <leader>c+ :cnewer<cr>

" NOTE: No location list command changes buffers
" Jump to current error
noremap <silent> <leader>ll :ll<cr>
" Open location list window
noremap <silent> <leader>lo :lopen<cr>
" Close location list window
noremap <silent> <leader>lC :lclose<cr>
" Open window when there are recognized errors, close it if there are none
noremap <silent> <leader>lw :lwindow<cr>
noremap <silent> <f7> :lwindow<cr>
" Re-read error file
noremap <silent> <leader>lf :lgetfile<cr>
" Re-read error file and jump to first error
noremap <silent> <leader>lj :lfile<cr>
" List all errors
noremap <silent> <leader>ll :llist<cr>
" Go to older error location list
noremap <silent> <leader>l- :lolder<cr>
" Go to newer error location list
noremap <silent> <leader>l+ :lnewer<cr>

" }}}
" Completion {{{
" Use <C-J> and <C-K> instead of <C-N> and <C-P>
imap <c-j> <c-n>
imap <c-k> <c-p>

" }}}

" Easier :nohl
noremap <silent> <leader><cr> :nohlsearch<cr>
" Makes folding fun
noremap <silent> <space> za
" Use this to toggle paste mode
set pastetoggle=<f1>
" Make Y behave like D and C
noremap <silent> Y y$

" }}}

" vim: foldmethod=marker
