# Command formats for gpg.
# 
# $Id$
#
# %p    The empty string when no passphrase is needed,
#       the string "PGPPASSFD=0" if one is needed.
#
#       This is mostly used in conditional % sequences.
#
# %f    Most PGP commands operate on a single file or a file
#       containing a message.  %f expands to this file's name.
#
# %s    When verifying signatures, there is another temporary file
#       containing the detached signature.  %s expands to this
#       file's name.
#
# %a    In "signing" contexts, this expands to the value of the
#       configuration variable $pgp_sign_as.  You probably need to
#       use this within a conditional % sequence.
#
# %r    In many contexts, mutt passes key IDs to pgp.  %r expands to
#       a list of key IDs.

# Note that we explicitly set the comment armor header since GnuPG, when used
# in some localiaztion environments, generates 8bit data in that header,
# thereby breaking PGP/MIME.

# decode application/pgp
set pgp_decode_command="gpg2 --status-fd=2 --no-verbose --quiet --batch --output - %f"

# verify a pgp/mime signature
set pgp_verify_command="gpg2 --status-fd=2 --no-verbose --quiet --batch --output - --verify %s %f"

# decrypt a pgp/mime attachment
set pgp_decrypt_command="gpg2 --status-fd=2 --no-verbose --quiet --batch --output - %f"

# create a pgp/mime signed attachment
set pgp_sign_command="gpg2 --no-verbose --batch --quiet --output - --armor --detach-sign --textmode %?a?-u %a? %f"

# create a application/pgp signed (old-style) message
set pgp_clearsign_command="gpg2 --no-verbose --batch --quiet --output - --armor --textmode --clearsign %?a?-u %a? %f"

# create a pgp/mime encrypted attachment
set pgp_encrypt_only_command="pgpewrap gpg2 --batch --quiet --no-verbose --output - --encrypt --textmode --armor --always-trust -- -r %r -- %f"

# create a pgp/mime encrypted and signed attachment
set pgp_encrypt_sign_command="pgpewrap gpg2 --batch --quiet --no-verbose --textmode --output - --encrypt --sign %?a?-u %a? --armor --always-trust -- -r %r -- %f"

# import a key into the public key ring
set pgp_import_command="gpg2 --no-verbose --import %f"

# export a key from the public key ring
set pgp_export_command="gpg2 --no-verbose --export --armor %r"

# verify a key
set pgp_verify_key_command="gpg2 --verbose --batch --fingerprint --check-sigs %r"

# read in the public key ring
set pgp_list_pubring_command="gpg2 --no-verbose --batch --quiet --with-colons --list-keys %r" 

# read in the secret key ring
set pgp_list_secring_command="gpg2 --no-verbose --batch --quiet --with-colons --list-secret-keys %r" 

# fetch keys
# Doesn't work because mutt puts the mail address into %r, instead of the key ID
#set pgp_getkeys_command="gpg2 --batch --quiet %r"

# This version uses --status-fd messages
# Needed to verify signed and encrypted messages
set pgp_good_sign="^\\[GNUPG:\\] GOODSIG"

# gpg-agent benutzen (läuft wegen SSH und gpg2 sowieso mit)
set pgp_use_gpg_agent

# Use gpgme - nur in Verbindung mit gpg-agent benutzen.
# Kann nicht benutzt werden, solange man nicht die gpgme-Quellen patcht.
#set crypt_use_gpgme

# Immer versuchen, Signaturen zu überprüfen
set crypt_verify_sig

# Immer versuchen, ausgehende Nachrichten zu signieren
set crypt_autosign

# Auf verschlüsselte Nachrichten immer verschlüsselt antworten
set crypt_replyencrypt

# Antwort auf signierte Nachrichten immer signieren
set crypt_replysign

# Antwort auf verschlüsselte Nachrichten immer signieren
set crypt_replysignencrypted
