# ~/.zshrc

# {{{ Modules
autoload -Uz compinit zmv colors
compinit
colors
# }}}

# {{{ Setup
# Setup gpg-agent for SSH keys
if [ -r "${XDG_CACHE_HOME}/gpg-agent/gpg-agent.info" ]; then
    source "${XDG_CACHE_HOME}/gpg-agent/gpg-agent.info"
    export GPG_AGENT_INFO
    export SSH_AUTH_SOCK
    export GPG_TTY=$(tty)
fi

[ -r "$(which virtualenvwrapper.sh)" ] && source virtualenvwrapper.sh

# One history to rule them all
HISTFILE=~/.cache/zsh/histfile
HISTSIZE=10000
SAVEHIST=10000
setopt inc_append_history share_history extended_glob

zstyle ':completion:*' completer _complete _ignored
zstyle :compinstall filename '/home/runiq/.zshrc'

# dircolors
d="~/.dircolors"
[[ -f "$d" ]] && eval "$(dircolors $d)"
# }}}

# {{{ Aliases
alias mkdbindex="dropbox-index -R ~/shr/Dropbox/Public"
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias ya="yaourt"
alias ls='ls -F --group-directories-first -h --color=auto'
alias ll='ls -l'
alias la='ls -A'
alias lla='ls -lA'
alias cdp='cdproject'
# }}}

# {{{ Prompt

# {{{ Color definitions
local reset black white red green blue cyan magenta yellow
reset="%{$reset_color%}"
black="%{$fg[black]%}"
blackb="%{$fg_bold[black]%}"
white="%{$fg[white]%}"
whiteb="%{$fg_bold[white]%}"
red="%{$fg[red]%}"
redb="%{$fg_bold[red]%}"
green="%{$fg[green]%}"
greenb="%{$fg_bold[green]%}"
blue="%{$fg[blue]%}"
blueb="%{$fg_bold[blue]%}"
cyan="%{$fg[cyan]%}"
cyanb="%{$fg_bold[cyan]%}"
magenta="%{$fg[magenta]%}"
magentab="%{$fg_bold[magenta]%}"
yellow="%{$fg[yellow]%}"
yellowb="%{$fg_bold[yellow]%}"
# }}}

# {{{ vcs_info
# Checks if vcs_info is available
function_exists() {
    local -a files
    # expands occurrences of $1 anywhere in $fpath,
    # removing files that don't exist
    files=(${^fpath}/$1(N))
    # Success if any files exist
    (( ${#files} ))
}

if function_exists vcs_info; then
    autoload -Uz vcs_info
    setopt prompt_subst
    zstyle ':vcs_info:*' enable hg git
    zstyle ':vcs_info:hg*:*' get-mq true
    zstyle ':vcs_info:*' stagedstr "$magenta?$reset"
    zstyle ':vcs_info:*' unstagedstr "$magenta!$reset"
    local repocwd="$cyanb%R$reset/$greenb%r$reset(%s)$green%b$reset/$cyanb%S$reset"
    local cwd="$cyanb${PWD/#$HOME/%~}$reset"
    zstyle ':vcs_info:*' formats "$repocwd"
    zstyle ':vcs_info:*' actionformats "$magenta%a$reset $repocwd"
    zstyle ':vcs_info:*' nvcsformats "$cwd"
    zstyle ':vcs_info:*+set-message:*' hooks change-vcs-name remove-trailing-dot shorten-path

    # {{{ Functions
    # Changes repo name to funny symbol
    function +vi-change-vcs-name() {
        case $hook_com[vcs] in
            hg) hook_com[vcs]="☿" ;;
            git) hook_com[vcs]="±" ;;
        esac
    }

    # Shortens path
    function +vi-shorten-path() {
        hook_com[base]="${hook_com[base]/#$HOME/~}"
        hook_com[base]="${hook_com[base]:h}"
    }
    # Removes trailing dot
    function +vi-remove-trailing-dot() {
        hook_com[subdir]=${hook_com[subdir]%%.}
    }
    # }}}

    precmd() {
        vcs_info
    }
fi
    # }}}

local user host wd venv sign
user="%(!.$magentab%n.$yellow%n)$reset"
host="$yellow%m$reset"
if function_exists vcs_info; then
    wd='${vcs_info_msg_0_}'
else
    wd="$cyanb${PWD/#$HOME/%~}$reset"
fi
venv='${VIRTUAL_ENV+ ${black}venv${reset}}'
sign="%(?.$black>.$magenta>)$reset"

PROMPT="$user@$host$venv $wd
$sign "
# }}}

# {{{ zkbd
autoload -Uz zkbd
[[ ! -f ${XDG_CONFIG_HOME}/zsh/zkbd/$TERM-${DISPLAY:-$VENDOR-$OSTYPE} ]] && zkbd
source ${XDG_CONFIG_HOME}/zsh/zkbd/$TERM-${DISPLAY:-$VENDOR-$OSTYPE}

[[ -n ${key[Backspace]} ]] && bindkey "${key[Backspace]}" backward-delete-char
[[ -n ${key[Insert]} ]] && bindkey "${key[Insert]}" overwrite-mode
[[ -n ${key[Home]} ]] && bindkey "${key[Home]}" beginning-of-line
[[ -n ${key[PageUp]} ]] && bindkey "${key[PageUp]}" up-line-or-history
[[ -n ${key[Delete]} ]] && bindkey "${key[Delete]}" delete-char
[[ -n ${key[End]} ]] && bindkey "${key[End]}" end-of-line
[[ -n ${key[PageDown]} ]] && bindkey "${key[PageDown]}" down-line-or-history
[[ -n ${key[Up]} ]] && bindkey "${key[Up]}" up-line-or-search
[[ -n ${key[Left]} ]] && bindkey "${key[Left]}" backward-char
[[ -n ${key[Down]} ]] && bindkey "${key[Down]}" down-line-or-search
[[ -n ${key[Right]} ]] && bindkey "${key[Right]}" forward-char
# }}}
