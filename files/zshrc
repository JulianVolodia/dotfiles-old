# ~/.zshrc

# {{{ Modules
autoload -U compinit
autoload -U zmv
autoload -U colors
compinit
colors
# }}}

# {{{ Setup
# Setup gpg-agent for SSH keys
ENV_FILE="$XDG_RUNTIME_DIR/gpg-agent.info"
if [[ -r "$ENV_FILE" ]]; then
    source "$ENV_FILE"
    export GPG_AGENT_INFO
    export SSH_AUTH_SOCK
    export GPG_TTY=$(tty)
fi

[ -r "$(which virtualenvwrapper_lazy.sh)" ] && source virtualenvwrapper_lazy.sh

# One history to rule them all
HISTFILE="$XDG_CACHE_HOME/zsh/histfile"
HISTSIZE=10000
SAVEHIST=10000
setopt inc_append_history share_history extended_glob

zstyle ':completion:*' completer _complete _ignored
zstyle :compinstall filename '/home/runiq/.zshrc'

# dircolors
d="~/.dircolors"
[[ -f "$d" ]] && eval "$(dircolors $d)"
# }}}

# {{{ Aliases
alias qmine="qstat | grep $USER"
alias mkdbindex="dropbox-index -R ~/shr/Dropbox/Public"
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias ls='ls -F -h --color'
alias ll='ls -l'
alias la='ls -A'
alias lla='ls -lA'
$(which pacman) && alias p=pacman
$(which pacaur) && alias pa=pacaur
if $(which pygmentize); then
    # Syntax-highlighted cat
    alias ccat='pygmentize -f terminal -g'
    # Syntax-highlighted less
    function cless() {
      pygmentize -g "$1" | less -R
    }
fi

# virtualenv {{{
# These only work when a virtualenv is active
# cd's into the project root directory
alias cdp='cdproject'
# cd into virtualenv directory (and subdirectory if given)
alias cdv='cdvirtualenv'
# cd into sitepackages (and subdirectory if given)
alias cds='cdsitepackages'
# }}}
# }}}

# {{{ Prompt
setopt prompt_subst
# {{{ Color definitions
local reset black white red green blue cyan magenta yellow
reset="%{$reset_color%}"
black="%{$fg[black]%}"
blackb="%{$fg_bold[black]%}"
white="%{$fg[white]%}"
whiteb="%{$fg_bold[white]%}"
red="%{$fg[red]%}"
redb="%{$fg_bold[red]%}"
green="%{$fg[green]%}"
greenb="%{$fg_bold[green]%}"
blue="%{$fg[blue]%}"
blueb="%{$fg_bold[blue]%}"
cyan="%{$fg[cyan]%}"
cyanb="%{$fg_bold[cyan]%}"
magenta="%{$fg[magenta]%}"
magentab="%{$fg_bold[magenta]%}"
yellow="%{$fg[yellow]%}"
yellowb="%{$fg_bold[yellow]%}"
# }}}

# {{{ vcs_info
# Checks if vcs_info is available
function_exists() {
    local -a files
    # expands occurrences of $1 anywhere in $fpath,
    # removing files that don't exist
    files=(${^fpath}/$1(N))
    # Success if any files exist
    (( ${#files} ))
}

if function_exists vcs_info; then
    autoload -Uz vcs_info
    zstyle ':vcs_info:*' enable hg git
    zstyle ':vcs_info:hg*:*' get-mq true
    zstyle ':vcs_info:*' stagedstr "$magenta?$reset"
    zstyle ':vcs_info:*' unstagedstr "$magenta!$reset"
    local repocwd="$blueb%R$reset/$greenb%r$reset@$green%b$reset/$blueb%S$reset"
    local cwd="$blueb%~$reset/"
    zstyle ':vcs_info:*' formats "$repocwd"
    zstyle ':vcs_info:*' actionformats "$magenta%a$reset $repocwd"
    zstyle ':vcs_info:*' nvcsformats "$cwd"
    zstyle ':vcs_info:*+set-message:*' hooks shorten-path

    # {{{ Functions
    # Does namedir expansion and removes trailing component from basedir
    # Also removes dot if subdir is just "."
    function +vi-shorten-path() {
        hook_com[base]="${(D)hook_com[base]:h}"
        hook_com[subdir]="${hook_com[subdir]%%.}"
    }
    # }}}

    precmd() {
        vcs_info
    }
fi
    # }}}

local user host wd venv sign
user="%(!.$magentab%n.$red%n)$reset"
host="${HOSTCOLOR=$yellow}%m$reset"
if function_exists vcs_info; then
    wd='${vcs_info_msg_0_}'
else
    wd="$blueb${PWD/#$HOME/%~}$reset"
fi
venv='${VIRTUAL_ENV+ ${black}venv${reset}}'
sign="%(?.$black>.$magenta>)$reset"

PROMPT="$user@$host$venv $wd
$sign "
# }}}

# {{{ zkbd
autoload -U zkbd
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
[[ ! -f ${XDG_CONFIG_HOME}/zsh/zkbd/$TERM ]] && zkbd
source ${XDG_CONFIG_HOME}/zsh/zkbd/$TERM

[[ -n ${key[Backspace]} ]] && bindkey "${key[Backspace]}" backward-delete-char
[[ -n ${key[Insert]} ]] && bindkey "${key[Insert]}" overwrite-mode
[[ -n ${key[Home]} ]] && bindkey "${key[Home]}" beginning-of-line
[[ -n ${key[PageUp]} ]] && bindkey "${key[PageUp]}" up-line-or-history
[[ -n ${key[Delete]} ]] && bindkey "${key[Delete]}" delete-char
[[ -n ${key[End]} ]] && bindkey "${key[End]}" end-of-line
[[ -n ${key[PageDown]} ]] && bindkey "${key[PageDown]}" down-line-or-history
[[ -n ${key[Up]} ]] && bindkey "${key[Up]}" up-line-or-beginning-search
[[ -n ${key[Left]} ]] && bindkey "${key[Left]}" backward-char
[[ -n ${key[Down]} ]] && bindkey "${key[Down]}" down-line-or-beginning-search
[[ -n ${key[Right]} ]] && bindkey "${key[Right]}" forward-char
# }}}

# vim: foldmethod=marker
